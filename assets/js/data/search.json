[ { "title": "[blog] 게시글 안올라가는 오류해결(deploy error)", "url": "/posts/blog-posting-error/", "categories": "blog", "tags": "blog", "date": "2022-07-16 14:31:00 +0900", "snippet": "❗️ 오류상황며칠전 게시글을 작성에서 올리는데빨간불이 들어왔다…그리고 문제는 이 이후에 푸쉬하는게 다 오류가 발생했다.🔍 원인결론부터 말하자면, 간단한 마크다운 문법 오류였다😅Error: Process completed with exit code 1.처음엔 빨간 부분만 보고 구글에 검색해봤는데 해결방법을 찾지 못했다.그런데 자세히 보니까 중간에 저 주저리주저리 써있는 게시글의 내용이 그냥 내 게시글 md파일의 전체 내용을 보여주는건 줄 알고 쓱 보고 넘겼었는데 특정 부분 이후 내용부터 적혀있다는것을 깨달았다…!해당 파일의 저 부분을 전부 주석처리하고 다시 푸쉬해보니성공!🥳그리고 자세히 보니 위에 이런 메시지도 있었다.* 11:2102: ERROR: Invalid first code point of tag name U+C774.이 오류 메시지를 검색하다가 &lt; &gt; 👈 이 부분이 문제였다는 사실을 알게 되었다.내가 이걸 하이라이트하겠다고 `&lt; &gt;` 이렇게 썼었고,` ` 👈이거 안에 백슬래쉬를 사용하면 \\&lt; \\&gt; 이렇게 보여지길래 생략해도 되는 줄 알았다.💡 해결 방법` ` 이걸 지우고, &lt; &gt; 👉 \\&lt; \\&gt; 이렇게 바꿔서 해결하였다.References git action 자동 배포 에러 해결기 (ERROR: Invalid first code point of tag name U+C804.)" }, { "title": "[Git] Git 커밋 메시지 컨벤션 (AngularJS)", "url": "/posts/git-commit-convention/", "categories": "TIL, Git", "tags": "TIL, Git, Commit", "date": "2022-07-12 20:39:10 +0900", "snippet": "Instruction지금까지 나는 깃에 커밋을 할 때 커밋메시지를 신경써본 적이 없다.깃이 협업에 필요하다는 것을 알았지만 그냥 사용법만 알면 되는줄 알았다.하지만 커밋 메시지를 가독성 있게 작성을 해야 팀원이 내가 무엇을 커밋한 것인지 알기 쉬워지며, 내가 어떤 코드를 어디에서 작성했는지 쉽게 찾을 수 있어서 유지보수가 쉬워진다.커밋 메시지는 딱히 정해진 형식이 존재하는 것은 아니고, 팀마다 원칙을 정하면 된다.일반적으로 Udacity나 AngularJS 스타일을 따른다.이번 포스팅에서는 AngularJS에 대해 다뤄보고 Udacity는 다음에 다뤄보도록 하겠다.📚 Git commit message convention✔️좋은 git 커밋 메시지를 작성하기 위한 7가지 방법 제목과 본문을 한 줄 띄워 분리하기 제목은 영문 기준 50자 이내로(가독성)(영어 2글자 = 한글 1글자이기 때문에, 한글 기준으로는 약 30자정도로 작성하면 된다.) 제목 첫글자를 대문자로 (영어만 해당) 제목 끝에 . 금지 제목은 명령조 → 과거형x, 현재형o (ex. 수정했음x, 수정함x, 수정o) 본문은 영문 기준 72자마다 줄 바꾸기 본문은 어떻게보다 무엇을, 왜에 맞춰 작성하기✔️AngularJS📝커밋 메시지의 형식&lt;type&gt;(&lt;scope&gt;): &lt;short summary&gt;&lt;BLANK LINE&gt;&lt;body&gt;&lt;BLANK LINE&gt;&lt;footer&gt;📌헤더&lt;type&gt;(&lt;scope&gt;): &lt;short summary&gt; &lt;type&gt;에 들어갈 수 있는 항목들 feat : 새로운 기능 추가 fix : 버그 수정 docs : 문서 관련 style : 스타일 변경 (포매팅 수정, 들여쓰기 추가, …) refactor : 코드 리팩토링 test : 테스트 관련 코드 build : 빌드 관련 파일 수정 ci : CI 설정 파일 수정 perf : 성능 개선 chore : 그 외 자잘한 수정 &lt;scope&gt;에 들어갈 수 있는 항목들 어디가 변경되었는지, 변경된 부분은 모두 들어갈 수 있다. 예를 들어, $location, $browser, $compile, $rootScope, ngHref, ngClick, ngView scope는 생략 가능하다. &lt;short summary&gt; 요약 설명 명령문, 현재 시제로 작성 첫글자 대분자X 소문자로 작성 마지막에 마침표(.) 금지 📌Message Body 명령문, 현재 시제 권장 변경한 이유와 변경 전과의 차이점 설명📌Message Footer 주요 변경 내역들 변경 설명 (description of the change) 변경 사유 (justification) 마이그레이션 지시 (migration instructions) 해결된 이슈 해결된 이슈는 커밋 메시지 하단에 Closes #&lt;이슈번호&gt; 와 같이 기록되어야 한다. 예시 Closes #234 Closes #123, #245, #992 📌예시feat($browser): onUrlChange event (popstate/hashchange/polling)Added new event to $browser:- forward popstate event if available- forward hashchange event if popstate not available- do polling when neither popstate nor hashchange availableBreaks $browser.onHashChange, which was removed (use onUrlChange instead)fix($compile): couple of unit tests for IE9Older IEs serialize html uppercased, but IE9 does not...Would be better to expect case insensitive, unfortunately jasmine doesnot allow to user regexps for throw expectations.Closes #392Breaks foo.bar api, foo.baz should be used insteaddocs(guide): updated fixed docs from Google DocsCouple of typos fixed:- indentation- batchLogbatchLog -&gt; batchLog- start periodic checking- missing braceReferences AngularJS Commit Message Conventions 좋은 git 커밋 메시지를 작성하기 위한 7가지 약속 " }, { "title": "[Java] 자바 코드 컨벤션 (Java code convention)", "url": "/posts/java-java-code-convention/", "categories": "TIL, Java", "tags": "TIL, Java", "date": "2022-07-12 16:34:30 +0900", "snippet": "Introduction컨벤션(convention)이란?convention은 협약, 관례라는 뜻이다.코드 컨벤션이란 읽고, 관리하기 쉬운 코드를 작성하기 위한 코딩 스타일 규약, 작성 표준을 의미한다.이 문서를 읽고 내용을 정리해보려고 한다.📚 Java code convention✔️이름 식별자에는 영문/숫자/언더스코어만 허용 한국어 발음대로 표기 금지 패키지 소문자로 구성 대문자, 언더스코어( _ ) 금지 클래스 대문자 카멜표기법 명사 사용 테스트 클래스는 ‘Test’로 끝남 인터페이스 대문자 카멜표기법 명사/형용사 사용 메서드 소문자 카멜표기법 - 첫 번째 단어를 소문자로 작성하고, 이어지는 단어의 첫 글자를 대문자로 작성 동사/전치사로 시작 테스트 클래스의 메서드 이름에서는 언더스코어를 허용 상수 대문자 복합어일 때 언더스코어 사용 변수 소문자 카멜표기법 임시 변수 외에는 1 글자 이름 사용 금지 ✔️선언 탑레벨 클래스(Top level class)는 소스 파일에 1개만 존재 static import에만 와일드 카드 허용 제한자 선언의 순서 annotation 선언 후 새줄 사용 한 줄에 한 문장 하나의 선언문에는 하나의 변수만 배열에서 대괄호는 타입 뒤에 선언 long형 값의 마지막에 L붙이기 특수 문자의 전용 선언 방식을 활용✔️들여쓰기 하드탭 사용 스페이스를 사용하지 않는다. 탭의 크기는 4개의 스페이스 블럭 들여쓰기 클래스, 메서드, 제어문 등의 코드 블럭이 생길 때마다 1단계를 더 들여쓴다. ✔️중괄호 { }클래스, 매서드, 제어문의 블럭을 구분 K&amp;R 스타일로 중괄호 선언 public class SearchConditionParser { public boolean isValidExpression(String exp) { if (exp == null) { return false; } for (char ch : exp.toCharArray()) { .... } return true; } } 닫는 중괄호와 같은 줄에 else, catch, finally, while 선언 빈 블럭에 새줄 없이 중괄호 닫기 허용 ex) public void close() {} 조건/반복문에 중괄호 필수 사용✔️줄바꿈작성한 명령어가 줄 너비를 초과했을 경우 코드 가독성을 위해서 강제로 줄을 바꾸는 것 최대 줄 사용 너비는 120자 package,import 선언문은 한 줄로 최대 줄수를 초과하더라도 한 줄로 쓴다. 줄바꿈 후 추가 들여쓰기 AbstractAggregateRootTest.AggregateRoot proxyAggregateRoot = em.getReference(AbstractAggregateRootTest.AggregateRoot.class, aggregateRoot.getId()); 줄바꿈 허용 위치 extends 선언 후 implements 선언 후 throws 선언 후 시작 소괄호(() 선언 후 콤마(,) 후 . 전 연산자 전 ✔️빈줄명령문 그룹의 영역을 표시하기 위하여 사용 package 선언 후 빈 줄 삽입 import 선언의 순서와 빈 줄 삽입 순서 static imports java. javax. org. net. 8~10을 제외한 com.* 1~6, 8~10을 제외한 패키지에 있는 클래스 com.nhncorp. com.navercorp. com.naver. 각 그룹 사이에는 빈줄을 삽입 같은 그룹 내에서는 알파벳 순으로 정렬 메소드 사이에 빈 줄 삽입✔️공백 공백으로 줄을 끝내지 않음 대괄호[ ] 뒤에 공백 삽입 중괄호의 시작 전, 종료 후에 공백 삽입 public void printWarnMessage(String line) { if (line.startsWith(WARN_PREFIX)) { ... } else { ... } } 제어문 키워드와 여는 소괄호 사이에 공백 삽입 if (maxLine &gt; LIMITED) { return false; } 식별자와 여는 소괄호 사이에 공백 X 타입 캐스팅에 쓰이는 소괄호 내부 공백 X 제네릭스 산괄호의 공백 규칙 public static &lt;A extends Annotation&gt; A find(AnnotatedElement elem, Class&lt;A&gt; type) { // 제네릭스 메서드 선언 List&lt;Integer&gt; l1 = new ArrayList&lt;&gt;(); // '(' 가 바로 이어질때 List&lt;String&gt; l2 = ImmutableList.Builder&lt;String&gt;::new; // 메서드 레퍼런스가 바로 이어질 때 int diff = Util.&lt;Integer, String&gt;compare(l1, l2); // 메서드 이름이 바로 이어질 때 } 콤마( , )/구분자 세미콜론( ; )의 뒤에만 공백 삽입 콜론( : )의 앞 뒤에 공백 삽입 이항/삼항 연산자의 앞 뒤에 공백 삽입 단항 연산자와 연산 대상 사이에 공백 X 주석문 기호 전후의 공백 삽입 /* * 공백 후 주석내용 시작 */ System.out.print(true); // 주석 기호 앞 뒤로 공백 /* 주석내용 앞에 공백, 뒤에도 공백 */ References 캠퍼스 핵데이 Java 코딩 컨벤션" }, { "title": "[SpringBoot] Spring Boot - Port 8080 is already in use", "url": "/posts/springboot-port/", "categories": "TIL, SpringBoot", "tags": "TIL, SpringBoot, CMD", "date": "2022-07-05 12:53:30 +0900", "snippet": "❗️ 오류 메세지 Port 8080 is already in use🔍 원인포트번호가 이미 사용중인 상태이다.💡 해결 방법 포트를 변경한다. 포트를 사용하고 있는 프로세스를 종료시킨다. 8080 포트를 사용 중인 프로세스 종료시키기 cmd 관리자 권한으로 실행netstat -ano | findstr 8080taskkill /F /pid (pid번호)ex)References [SpringBoot] 에러 spring boot port already in use" }, { "title": "[SpringBoot] Spring Boot - CMD에서 build 오류 해결(invalid source release)", "url": "/posts/springboot-setting2/", "categories": "TIL, SpringBoot", "tags": "TIL, SpringBoot, CMD, JDK", "date": "2022-07-05 11:46:30 +0900", "snippet": "윈도우에서 스프링부트 빌드 하는 법 cmd 프로젝트 디렉토리로 이동 gradlew &lt;enter&gt; gradlew build &lt;enter&gt; ❗️ 오류 메세지 Execution failed for task ‘:compileJava’. &gt; invalid source release: 11🔍 원인위의 오류 메세지는 이전 포스팅과 똑같다.IntelliJ에서 빌드 할 때는 프로젝트 구성에서 바꿔준 JDK를 이용하여 빌드가 되지만, gradlew.bat는 프로젝트가 사용하는 JDK의 경로를 알지 못하기 때문에 위와 같은 오류가 한 번 더 발생했다.💡 해결 방법- 환경변수 편집 내 PC 우 클릭&gt; 속성 &gt; 고급 시스템 설정 &gt; 환경 변수 시스템 변수 &gt; 새로 만들기-변수 이름: JAVA_HOME-변수 값: JDK의 경로 입력&gt; 확인 시스템 변수 중 Path 편집-새로 만들기 &gt; %JAVA_HOME%\\bin 입력 &gt; 확인 나는 여기까지해도 해결이 되지않아 사용자 변수도 편집해주었다. 사용자 변수 &gt; 새로 만들기-변수 이름: JAVA_HOME-변수 값: JDK의 경로 입력&gt; 확인 사용자 변수 중 Path 편집JDK의 경로 입력 &gt; 확인References 인프런 질의응답 [IntelliJ] Cause: invalid source release: 11 에러" }, { "title": "[SpringBoot] Spring Boot, IntelliJ - invalid source release 오류 해결", "url": "/posts/springboot-setting/", "categories": "TIL, SpringBoot", "tags": "TIL, SpringBoot, IntelliJ, JDK", "date": "2022-07-04 23:03:30 +0900", "snippet": "❗️ 오류 메세지 Execution failed for task ‘:compileJava’. &gt; invalid source release: 11🔍 원인 gradle에 설정된 JDK 버전과 IntelliJ에 설정된 JDK 버전이 다르기 때문이다. 우선 오류 메세지 끝에 숫자(11)에 맞는 버전이 설치되어 있는지 확인하고 맞는 버전의 JDK를 설치하자 JDK 11 설치하기 ex) 17이면 17버전을 설치하면 된다. 💡 해결 방법 프로젝트 JDK 설정gradle JDK 설정 File -&gt; Project Structure(+)버튼 눌러서 JDK 추가하기 File -&gt; Settings References Execution failed for task ‘:compileJava’. &gt; invalid source release: 11" }, { "title": "[blog] chirpy테마 커스터마이징", "url": "/posts/blog-customising/", "categories": "blog", "tags": "blog", "date": "2022-07-03 15:22:00 +0900", "snippet": "chirpy테마 커스터마이징아래의 사이트를 참조하여 타이틀과 서브타이틀의 색상을 화이트로 바꾸고파비콘과 사이드바를 바꾸었다.추가예정인 커스텀 사이드바 메뉴 글자 색 흰색으로 변경 완료! 댓글 기능 추가References 타이틀, 서브타이틀 폰트색상 변경 favicon, sidebar 변경" } ]
